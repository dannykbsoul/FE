{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/diff.js","webpack:///./src/element.js","webpack:///./src/index.js","webpack:///./src/patch.js","webpack:///./src/utils.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,YAAY,mBAAO,CAAC,+BAAS;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;;;;;;;;;;;AC/EA,YAAY,mBAAO,CAAC,+BAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;ACpCA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,mCAAW;AACvB,WAAW,mBAAO,CAAC,6BAAQ;AAC3B,YAAY,mBAAO,CAAC,+BAAS;AAC7B;AACA;AACA,CAAC;AACD;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM,IAAI,sBAAsB,KAAK,sBAAsB,KAAK,sBAAsB;AACtF,wB;;;;;;;;;;;AClCA;AACA,YAAY,mBAAO,CAAC,+BAAS;AAC7B,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,uB;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","let utils = require('./utils');\n\nlet keyIndex = 0;\n\nfunction diff(oldTree, newTree) {\n  //记录差异的空对象。key就是老节点在原来虚拟DOM树中的序号，值就是一个差异对象数组\n  let patches = {};\n  keyIndex = 0;\n  let index = 0;\n  walk(oldTree, newTree, index, patches);\n  return patches;\n}\n//遍历\n//REMOVE: 'REMOVE',//此节点被移除\n//ATTRS: \"ATTRS\",//属性被改变\n//TEXT: \"TEXT\",//文本内容被改变\n//REPLACE: \"REPLACE\", //节点要被整个替换  \nfunction walk(oldNode, newNode, index, patches) {\n  let currentPatches = []; //这个数组里记录了所有的oldNode的变化\n  if (!newNode) { //如果新节点没有了，则认为此节点被删除了\n    currentPatches.push({\n      type: utils.REMOVE,\n      index\n    });\n    //如果说老节点的新的节点都是文本节点的话\n  } else if (utils.isString(oldNode) && utils.isString(newNode)) {\n    //如果新的字符符值和旧的不一样\n    if (oldNode != newNode) {\n      ///文本改变 \n      currentPatches.push({\n        type: utils.TEXT,\n        content: newNode\n      });\n    }\n  } else if (oldNode.tagName == newNode.tagName) {\n    //比较新旧元素的属性对象\n    let attrsPatch = diffAttr(oldNode.attrs, newNode.attrs);\n    //如果新旧元素有差异 的属性的话\n    if (Object.keys(attrsPatch).length > 0) {\n      //添加到差异数组中去\n      currentPatches.push({\n        type: utils.ATTRS,\n        attrs: attrsPatch\n      });\n    }\n    //自己比完后再比自己的儿子们\n    diffChildren(oldNode.children, newNode.children, index, patches, currentPatches);\n  } else {\n    currentPatches.push({\n      type: utils.REPLACE,\n      node: newNode\n    });\n  }\n  if (currentPatches.length > 0) {\n    patches[index] = currentPatches;\n  }\n}\n//老的节点的儿子们 新节点的儿子们 父节点的序号 完整补丁对象 当前旧节点的补丁对象\nfunction diffChildren(oldChildren, newChildren, index, patches, currentPatches) {\n  oldChildren.forEach((child, idx) => {\n    walk(child, newChildren[idx], ++keyIndex, patches);\n  });\n}\n\nfunction diffAttr(oldAttrs, newAttrs) {\n  let attrsPatch = {};\n  for (let attr in oldAttrs) {\n    //如果说老的属性和新属性不一样。一种是值改变 ，一种是属性被删除 了\n    if (oldAttrs[attr] != newAttrs[attr]) {\n      attrsPatch[attr] = newAttrs[attr];\n    }\n  }\n  for (let attr in newAttrs) {\n    if (!oldAttrs.hasOwnProperty(attr)) {\n      attrsPatch[attr] = newAttrs[attr];\n    }\n  }\n  return attrsPatch;\n}\nmodule.exports = diff;","let utils = require('./utils');\n/**\n * 1.标签类型 h1 div\n * 2.属性 className id \n * 3.子元素 可能是一个数组\n */\nclass Element {\n  //标签名 属性对象 子元素数组\n  constructor(tagName, attrs, children) {\n    this.tagName = tagName;\n    this.attrs = attrs;\n    this.children = children || [];\n  }\n  //把一个虚拟的DOM节点渲染成一个真实的DOM节点\n  render() {\n    //创建一个真实的DOM节点\n    let element = document.createElement(this.tagName);\n    //给此真实的DOM元素节点增加属性\n    for (let attr in this.attrs) {\n      utils.setAttr(element, attr, this.attrs[attr]);\n    }\n    //先序深度遍历\n    this.children.forEach(child => {\n      //如果子节点是一个元素的话，就调用它的render方法创建子节点的真实DOM，如果是一个字符串的话，创建一个文件节点就可以了\n      let childElement = (child instanceof Element) ? child.render() : document.createTextNode(child);\n      element.appendChild(childElement);\n    });\n    return element;\n  }\n}\n\nfunction createElement(tagName, attrs, children) {\n  return new Element(tagName, attrs, children);\n}\nmodule.exports = {\n  createElement\n};","let {\n  createElement\n} = require('./element');\nlet diff = require('./diff');\nlet patch = require('./patch');\nlet ul1 = createElement('ul', {\n  class: 'list'\n}, [\n  createElement('li', {\n    class: 'item'\n  }, ['1']),\n  createElement('li', {\n    class: 'item'\n  }, ['2']),\n  createElement('li', {\n    class: 'item'\n  }, ['3'])\n]);\nlet root = ul1.render();\nconsole.log(root);\ndocument.body.appendChild(root);\n// let ul2 = createElement('ul', {\n//   class: 'list'\n// }, [\n//   createElement('li', {\n//     class: 'item'\n//   }, ['1']),\n//   createElement('li', {\n//     class: 'item'\n//   }, ['2'])\n// ]);\n// let patches = diff(ul1, ul2);\n// console.log(patches);\n// //{2:[{type:'TEXT',content:3},4:[{type:'TEXT',content:2},6:[{type:'TEXT',content:1}]\n// patch(root, patches);","let keyIndex = 0;\nlet utils = require('./utils');\nlet allPatches; //这里就是完整的补丁包\nfunction patch(root, patches) {\n  allPatches = patches;\n  walk(root);\n}\n\nfunction walk(node) {\n  let currentPatches = allPatches[keyIndex++];\n  (node.childNodes || []).forEach(child => walk(child));\n  if (currentPatches) {\n    doPatch(node, currentPatches);\n  }\n}\n\nfunction doPatch(node, currentPatches) {\n  currentPatches.forEach(patch => {\n    switch (patch.type) {\n      case utils.ATTRS:\n        for (let attr in patch.attrs) {\n          let value = patch.attrs[attr];\n          if (value) {\n            utils.setAttr(node, attr, value);\n          } else {\n            node.removeAttribute(attr);\n          }\n        }\n        break;\n      case utils.TEXT:\n        node.textContent = patch.content;\n        break;\n      case utils.REPLACE:\n        let newNode = (patch.node instanceof Element) ? path.node.render() : document.createTextNode(path.node);\n        node.parentNode.replaceChild(newNode, node);\n        break;\n      case utils.REMOVE:\n        node.parentNode.removeChild(node);\n        break;\n    }\n  });\n}\nmodule.exports = patch;","let utils = {\n  //元素变化有哪些种类\n  REMOVE: 'REMOVE', //此节点被移除\n  ATTRS: \"ATTRS\", //属性被改变\n  TEXT: \"TEXT\", //文本内容被改变\n  REPLACE: \"REPLACE\", //节点要被整个替换  \n  setAttr(element, attr, value) {\n    switch (attr) {\n      case 'style':\n        element.style.cssText = value;\n        break;\n      case 'value':\n        let tagName = element.tagName.toLowerCase();\n        if (tagName == 'input' || tagName == 'textarea') {\n          element.value = value;\n        } else {\n          element.setAttribute(attr, value);\n        }\n        break;\n      default:\n        element.setAttribute(attr, value);\n        break;\n    }\n\n  },\n  type(obj) {\n    // [object String]\n    return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, '');\n  },\n  isString(str) {\n    return utils.type(str) == 'String';\n  }\n}\nmodule.exports = utils;"],"sourceRoot":""}